#! /usr/bin/env ruby
require 'pg'
require 'date'
require 'pry'

DATABASE_NAME = 'expense'

class ExpenseManager
  def initialize
    @db = connect_to_database
  end

  def display_help
    puts <<~HELP
  An expense recording system

  Commands:

  add AMOUNT MEMO - record a new expense
  clear - delete all expenses
  list - list all expenses
  delete NUMBER - remove expense with id NUMBER
  search QUERY - list expenses with a matching memo field
  HELP
  end

  def list_expenses
    read_expenses
  end

  def add_new_expense(amount, memo)
    if valid_input?(amount, memo)
      query = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
      params = ["#{amount}", "#{memo}", "#{Date.today}"]
      execute_query(query, params)
    else
      puts "Invalid amount or memo."
    end
  end

  private
  attr_reader :db

  def connect_to_database
    PG.connect(dbname: DATABASE_NAME)
  rescue PG::ConnectionBad => e
    puts e.message
    exit(1)
  rescue PG::Error => e
    puts e.message
    exit(1)
  end

  def read_expenses
    result = db.exec("SELECT * FROM expenses")
    result.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]
      puts columns.join(" | ")
    end
  rescue PG::Error => e
    puts e.message
    exit(1)
  end

  def execute_query(query, params)
    db.exec_params(query, params)
    puts "The expense has been added successfully."
  rescue PG::Error => e
    puts "Error adding expense: #{e.message}"
    exit(1)
  end

  def valid_input?(amount, memo)
    valid_amount?(amount) && valid_memo?(convert_memo_array_to_string(memo))
  end

  def valid_amount?(amount)
    begin
    amount.match?(/^[0-9]{1,4}\.[0-9]{1,2}$/)
    rescue NoMethodError => e
      puts "Invalid amount: #{e.message}"
      exit(1)
    end
  end

  def valid_memo?(memo)
    begin
      memo.match?(/^[a-zA-Z]+ ?[a-zA-Z]+$/)
    rescue NoMethodError => e
      puts "Invalid memo: #{e.message}"
      exit(1)
    end
  end

  def convert_memo_array_to_string(memo)
    begin
      memo.join(" ")
    rescue NoMethodError => e
      puts "Can't convert memo into a string: #{e.message}"
      exit(1)
    end
  end

end

command = ARGV[0]
amount = ARGV[1]
memo = ARGV[2..]


new_expense_manager = ExpenseManager.new

case command
when 'list' then new_expense_manager.list_expenses
when 'add' then new_expense_manager.add_new_expense(amount, memo)
else
  new_expense_manager.display_help
end